# Mira AI Core Library Rules

## Architecture: Modular Orchestrator + Agents

### Orchestrator Modules (`src/orchestrator/`)

- **`enrichment-context.ts`** - Setup, configuration, and context management
- **`enrichment-flow.ts`** - Step-by-step execution and coordination logic
- **`early-termination.ts`** - Smart stopping when confidence thresholds are met
- **`result-builder.ts`** - Final result compilation and formatting
- **`agent-coordinator.ts`** - Agent execution wrappers and interfaces
- **`data-merger.ts`** - Confidence-based data point merging
- **`progress-manager.ts`** - Real-time progress event generation
- **`sources-manager.ts`** - Source URL tracking and deduplication

### AI Agents (`src/agents/`)

1. **Discovery Agent** - Landing page analysis, finds internal pages and social links, generates Google search queries (if enabled)
2. **Internal Pages Agent** - Targeted extraction from About/Careers pages (only for missing data)
3. **LinkedIn Agent** - Company profile analysis (only for missing/low-confidence data)
4. **Google Search Agent** - Targeted searches for remaining gaps
5. **Company Analysis Agent** - Executive summary and/or criteria fit scoring

## Key Concepts

- **Configurable Data Points** - Define custom `{ name, description }` pairs for extraction
- **Intelligent Source Selection** - Enable/disable crawling, LinkedIn, Google, analysis
- **Smart Early Termination** - Auto-stop when all data points reach confidence thresholds
- **Confidence-Based Merging** - Higher confidence scores (1-5) take precedence
- **Targeted Processing** - Only process missing/low-confidence data in later steps

## Library Development

- Export everything through src/index.ts
- Use proper TypeScript types, avoid `any`
- Keep orchestrator modules focused on single responsibilities
- Handle errors with descriptive messages

## API Design

- Accept config objects with `enrichmentConfig: { dataPoints, sources }`
- Return structured results with `{ enrichedCompany, companyAnalysis }`
- Use Zod schemas for validation
- Set process.env in enrichment-context.ts, not throughout the codebase

## Testing

- Test all public functions
- Use .env.test for test API keys
- Mock external services in tests
